# .github/workflows/ci.yml

name: Hardhat PR Check

# Controls when the workflow will run
on:
  # Triggers the workflow ONLY on pull request events targeting the main/master branches
  pull_request:
    branches: [main, master]
    # By default, this triggers for PR 'opened', 'synchronize' (new commits pushed), and 'reopened'.
    # You can specify types if needed, e.g.:
    # types: [ opened, synchronize ]

# Sets default permissions for the GITHUB_TOKEN. Read is usually sufficient for PR checks.
permissions:
  contents: read
  id-token: write

# Cancels previous runs for the same PR when new commits are pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }} # Group by workflow and head ref (PR branch name)
  cancel-in-progress: true

jobs:
  # Define the main job for building and testing
  build-and-test:
    name: Build & Test (Node ${{ matrix.node-version }})
    # Run on the latest version of Ubuntu
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [22]
    env:
      POLYGON_MAINNET_RPC_URL: ${{ secrets.POLYGON_MAINNET_RPC_URL }}
      POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
      KMS_KEY_ID: ${{ secrets.KMS_KEY_ID }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

    steps:
      # 1. Checkout Repository
      # Checks-out the PR's branch code under $GITHUB_WORKSPACE
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Fetch depth 0 is often useful on PRs if tests/tools compare against the base branch
        with:
          fetch-depth: 0

      # 2. Setup Node.js Environment
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm" # Use 'yarn' if using Yarn

      # 3. Install Dependencies
      - name: Install Dependencies
        run: npm ci

      # 4. Lint Code (Solidity & TypeScript)
      - name: Lint Code
        run: npm run lint

      # 5. Check Code Formatting
      - name: Check Formatting
        run: npm run format:check

      # 6. Compile Smart Contracts
      - name: Compile Contracts
        run: npx hardhat compile

      # 7. Type Check (TypeScript)
      - name: Type Check
        run: npm run typecheck

      # 9. Generate Code Coverage Report
      - name: Hardhat tests
        run: npx hardhat test
        env:
          CI: true

      # 10. Upload Coverage Artifact
      # Useful for debugging failed PRs or reviewing coverage changes
      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: ./coverage/
          if-no-files-found: warn

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Use the latest major version
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: "us-east-1"

      - name: Initial deploy
        run: |
          npx hardhat deploy-vmahout --network polygon --minter 0x8c91861040211f64f76100064321DcF43c2181eF