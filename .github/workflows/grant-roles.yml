name: Grant Roles

# This workflow can only be executed by organization admins
# It grants the LEXICON_ORACLE_MANAGER_ROLE to specified addresses on the PropertyDataConsensus contract

on:
  workflow_dispatch:
    inputs:
      network:
        description: "Network to deploy to"
        required: true
        type: choice
        options:
          - polygon
          - amoy
      proxy:
        description: "PropertyDataConsensus proxy address"
        required: true
        type: string
      recipient:
        description: "Address to grant LEXICON_ORACLE_MANAGER_ROLE to"
        required: true
        type: string

# Permissions required for OIDC and checking out code
permissions:
  contents: read
  id-token: write

jobs:
  check-permissions:
    name: Check Admin Permissions
    runs-on: ubuntu-latest
    outputs:
      is-admin: ${{ steps.check.outputs.is-admin }}
    steps:
      - name: Check if user is organization admin
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get the user who triggered the workflow
              const actor = context.actor;
              
              // Get organization name from repository
              const org = context.repo.owner;
              
              // Check if user has admin role in the organization
              const { data: membership } = await github.rest.orgs.getMembershipForUser({
                org: org,
                username: actor
              });
              
              const isAdmin = membership.role === 'admin';
              console.log(`User ${actor} is ${isAdmin ? 'an' : 'not an'} admin in ${org}`);
              
              if (!isAdmin) {
                core.setFailed(`User ${actor} is not an organization admin. This workflow can only be run by organization admins.`);
              }
              
              core.setOutput('is-admin', isAdmin);
              return isAdmin;
            } catch (error) {
              console.error('Error checking organization membership:', error);
              core.setFailed(`Failed to verify organization admin status: ${error.message}`);
              return false;
            }

  grant-role:
    name: Grant LEXICON_ORACLE_MANAGER_ROLE
    runs-on: ubuntu-latest
    needs: check-permissions
    if: needs.check-permissions.outputs.is-admin == 'true'

    env:
      POLYGON_MAINNET_RPC_URL: ${{ secrets.POLYGON_MAINNET_RPC_URL }}
      AMOY_RPC_URL: ${{ secrets.AMOY_RPC_URL }}
      POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
      KMS_KEY_ID: ${{ secrets.RELEASE_KMS_KEY_ID }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.RELEASE_ROLE }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: "us-east-1"

      - name: Install Dependencies
        run: npm ci

      - name: Compile Contracts
        run: npx hardhat compile

      - name: Grant LEXICON_ORACLE_MANAGER_ROLE
        run: |
          echo "Granting LEXICON_ORACLE_MANAGER_ROLE on ${{ inputs.network }}"
          echo "Proxy: ${{ inputs.proxy }}"
          echo "Recipient: ${{ inputs.recipient }}"

          npx hardhat grantLexiconOracleManager \
            --network ${{ inputs.network }} \
            --proxy ${{ inputs.proxy }} \
            --recipient ${{ inputs.recipient }}
